import cv2
import numpy as np
import streamlit as st
import threading
# Load the pre-trained Haar Cascade Classifier for full body detection
body_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_fullbody.xml')

# Set the desired frame rate
desired_fps = 25
frame_delay = 1.0 / desired_fps  # Calculate the time delay for the desired frame rate

people = []  # List to store detected people
next_person_id = 1  # Initialize unique ID counter
frame_count = 0
frame_skip = 2

# Define two lines for counting people
line1_x = 200  # X-coordinate of the first line
people_in_count = 0
people_out_count = 0
# Danh sách các đối tượng đang được theo dõi, bao gồm ID của từng đối tượng và trạng thái ('in' hoặc 'out')
tracking_objects = {}
next_object_id = 1  # Bắt đầu ID từ 1
# Vẽ đường ngang
def draw_line(image, line):
    cv2.line(image, line[0], line[6], (255, 0, 0), 2)
# Luồng cho việc phát hiện người
def detect_people():
    global enter_count, exit_count, tracking_objects

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame = cv2.resize(frame, (640, 480))
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
# Create a Streamlit web app
st.title("Real-time Person Detection and Counting")

# Create a Streamlit window to display the video stream
video_frame = st.empty()

cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)

while True:
    ret, frame = cap.read()
    frame_count += 1
    if frame_count % frame_skip != 0:
        continue

    if not ret:
        break

    # Convert the frame to grayscale for body detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Perform body detection
    bodies = body_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(50, 50))

    # Update the list of people and draw bounding boxes with IDs, centroids, and counting lines
    for (x, y, w, h) in bodies:
        person_detected = False
        for person in people:
            px, py, pw, ph, pid = person
            # Check if the detected body is close to an existing person
            if abs(x - px) < 20 and abs(y - py) < 20:
                person[0] = x
                person[1] = y
                person_detected = True
                # Draw a bounding box with the person's ID
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, str(pid), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                # Calculate and draw the centroid
                centroid_x = x + w // 2
                centroid_y = y + h
                cv2.circle(frame, (centroid_x, centroid_y), 4, (0, 0, 255), -1)
                # Check if the person is moving in or out
                if y + h < line1_x and py + ph >= line1_x:
                    people_out_count += 1
                if y > line1_x and py <= line1_x:
                    people_in_count += 1
                break
        if not person_detected:
            # Assign a new ID to the detected person and add them to the list
            pid = next_person_id
            next_person_id += 1
            people.append([x, y, w, h, pid])
            # Draw a bounding box with the person's ID
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, str(pid), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            # Calculate and draw the centroid
            centroid_x = x + w // 2
            centroid_y = y + h
            cv2.circle(frame, (centroid_x, centroid_y), 4, (0, 0, 255), -1)

    # Draw the counting lines
    line1_x = (frame.shape[0] * 7) // 8
    cv2.line(frame, (0, line1_x), (frame.shape[1], line1_x), (0, 0, 255), 2)
    # Điểm đầu và điểm cuối của đường ngang phía trên
    line = [(0, 480 // 6), (640, 480 // 6)]
    tracker = cv2.TrackerCSRT_create()
    # Display the frame with person detection and counting
    cv2.putText(frame, f"People In: {people_in_count}", (7, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.putText(frame, f"People Out: {people_out_count}", (7, 60), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # Display the frame in Streamlit
    video_frame.image(frame, channels="BGR", use_column_width=True)

    # Stop the loop if 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
# Bắt đầu luồng phát hiện người
detect_thread = threading.Thread(target=detect_people)
detect_thread.start()
# Display final counts and cleanup
st.write(f"People In: {people_in_count}")
st.write(f"People Out: {people_out_count}")
st.write("Download the result file below:")
st.markdown("[Download {result_filename}](/{result_filename})")
cap.release()
cv2.destroyAllWindows()
